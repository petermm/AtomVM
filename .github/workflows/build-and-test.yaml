#
#  Copyright 2017-2022 Davide Bettio <davide@uninstall.it>
#
#  SPDX-License-Identifier: Apache-2.0 OR LGPL-2.1-or-later
#

name: Build and Test

on:
  push:
    paths-ignore:
      - "src/platforms/emscripten/**"
      - "src/platforms/esp32/**"
      - "src/platforms/rp2/**"
      - "src/platforms/stm32/**"
      - "doc/**"
      - "LICENSES/**"
      - "*.Md"
      - "*.md"
  pull_request:
    paths-ignore:
      - "src/platforms/emscripten/**"
      - "src/platforms/esp32/**"
      - "src/platforms/rp2/**"
      - "src/platforms/stm32/**"
      - "doc/**"
      - "LICENSES/**"
      - "*.Md"
      - "*.md"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref != 'refs/heads/main' && github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ${{ matrix.os || 'ubuntu-24.04' }}
    container: ${{ matrix.container }}
    strategy:
      fail-fast: false

      matrix:
        # Ubuntu 20.04 has gcc from 7 to 10 ("gcc" is gcc-9)
        # Ubuntu 22.04 has gcc from 9 to 12 ("gcc" is gcc-11)
        # Ubuntu 24.04 has gcc from 9 to 14 ("gcc" is gcc-13)
        # Ubuntu 20.04 has clang 10 and 12 to  ("clang" is 10)
        # Ubuntu 22.04 has clang from 12 to 15 ("clang" is 14)
        # Ubuntu 24.04 has clang from 14 to 18 ("clang" is 18)
        # We want to test every compiler but don't need to test every OS
        # We only test several OTP versions with default compilers (gcc-9, 11, 13, clang-10, 14, 18)
        cc: ["gcc-9"]
        cflags: ["-O3"]
        otp: ["25"]
        gleam_version: ["1.8.0"]

        include:
          # arm64 build
          - os: "ubuntu-24.04-arm"
            rebar3_version: "3.25.0"
            cflags: ["-O3"]
            otp: "28.1"
            cc: "gcc-14"
            cxx: "g++-14"
            compiler_pkgs: "gcc-14 g++-14"

    env:
      ImageOS: ${{ matrix.container == 'ubuntu:20.04' && 'ubuntu20' || matrix.os == 'ubuntu-20.04' && 'ubuntu20' || matrix.os == 'ubuntu-22.04' && 'ubuntu22' || matrix.os == 'ubuntu-24.04' && 'ubuntu24' || 'ubuntu24' }}
      CC: ${{ matrix.cc }}
      CXX: ${{ matrix.cxx }}
      CFLAGS: ${{ matrix.cflags }}
      CXXFLAGS: ${{ matrix.cflags }}
      DEBIAN_FRONTEND: noninteractive
      TZ: "Etc/UTC"

    steps:
      # Setup
      - name: "Install deps for containers"
        if: matrix.container != ''
        run: apt-get update && apt-get install -y --no-install-recommends sudo unzip git tzdata

      - name: "Add i386 architecture"
        if: matrix.arch == 'i386'
        run: sudo dpkg --add-architecture i386

      - name: "APT update"
        run: sudo apt update -y

      - name: "Install deps"
        run: sudo apt install -y ${{ matrix.compiler_pkgs}} cmake gperf zlib1g-dev doxygen valgrind libmbedtls-dev

      - name: "Checkout repo"
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - uses: erlef/setup-beam@v1
        if: matrix.container != 'elixir:otp-28'
        with:
          otp-version: ${{ matrix.otp }}
          elixir-version: ${{ matrix.elixir_version }}
          rebar3-version: ${{ matrix.rebar3_version }}
          gleam-version: ${{ matrix.gleam_version }}
          hexpm-mirrors: |
            https://builds.hex.pm
            https://repo.hex.pm
            https://cdn.jsdelivr.net/hex

      # Builder info
      - name: "System info"
        run: |
          echo "**uname:**"
          uname -a
          echo "**libc version:**"
          ldd --version
          echo "**C Compiler version:**"
          $CC --version
          $CXX --version
          echo "**Linker version:**"
          ld --version
          echo "**CMake version:**"
          cmake --version
          echo "**OTP version:**"
          cat $(dirname $(which erlc))/../releases/RELEASES || true

      # Build
      - name: "Build: create build dir"
        run: mkdir build

      - uses: actions/cache@v4
        id: cache
        with:
          path: "build/tests/**/*.beam"
          key: ${{ matrix.otp }}-${{ hashFiles('**/build-and-test.yaml', 'tests/**/*.erl') }}

      - name: "Build: run cmake"
        working-directory: build
        run: |
          cmake ${{ matrix.cmake_opts_fp }} ${{ matrix.cmake_opts_smp }} ${{ matrix.cmake_opts_other }} ..
          # git clone will use more recent timestamps than cached beam files
          # touch them so we can benefit from the cache and avoid costly beam file rebuild.
          find . -name '*.beam' -exec touch {} \;

      - name: "Build: run make"
        working-directory: build
        run: make

      - name: "Build: run dialyzer"
        working-directory: build
        run: make dialyzer

      # Test
      - name: "Test: test-erlang"
        timeout-minutes: 15
        working-directory: build
        run: |
          ulimit -c unlimited
          valgrind --error-exitcode=1 ./tests/test-erlang -s prime_smp
          ./tests/test-erlang -s prime_smp

      - name: "Test: test-enif"
        working-directory: build
        run: |
          ulimit -c unlimited
          valgrind --error-exitcode=1 ./tests/test-enif
          ./tests/test-enif

      - name: "Test: test-heap"
        working-directory: build
        run: |
          ulimit -c unlimited
          valgrind --error-exitcode=1 ./tests/test-heap
          ./tests/test-heap

      - name: "Test: test-mailbox"
        working-directory: build
        run: |
          ulimit -c unlimited
          valgrind --error-exitcode=1 ./tests/test-mailbox
          ./tests/test-mailbox

      - name: "Test: test-structs"
        timeout-minutes: 10
        working-directory: build
        run: |
          ulimit -c unlimited
          valgrind --error-exitcode=1 ./tests/test-structs
          ./tests/test-structs

      - name: "Test: test_etest.avm"
        timeout-minutes: 5
        working-directory: build
        run: |
          ulimit -c unlimited
          ./src/AtomVM ./tests/libs/etest/test_etest.avm
          valgrind ./src/AtomVM ./tests/libs/etest/test_etest.avm

      - name: "Test: test_estdlib.avm"
        timeout-minutes: 30
        working-directory: build
        run: |
          ulimit -c unlimited
          valgrind --error-exitcode=1 ./src/AtomVM ./tests/libs/estdlib/test_estdlib.avm
          ./src/AtomVM ./tests/libs/estdlib/test_estdlib.avm

      - name: "Test: test_eavmlib.avm"
        timeout-minutes: 10
        working-directory: build
        run: |
          ulimit -c unlimited
          valgrind --error-exitcode=1 ./src/AtomVM ./tests/libs/eavmlib/test_eavmlib.avm
          ./src/AtomVM ./tests/libs/eavmlib/test_eavmlib.avm

      - name: "Test: test_jit.avm"
        timeout-minutes: 30
        if: matrix.otp != '21' && matrix.otp != '22'
        working-directory: build
        run: |
          ulimit -c unlimited
          valgrind --error-exitcode=1 ./src/AtomVM tests/libs/jit/test_jit.avm
          ./src/AtomVM tests/libs/jit/test_jit.avm

      - name: "Test: test_alisp.avm"
        timeout-minutes: 10
        working-directory: build
        run: |
          ulimit -c unlimited
          valgrind --error-exitcode=1 ./src/AtomVM ./tests/libs/alisp/test_alisp.avm
          ./src/AtomVM ./tests/libs/alisp/test_alisp.avm

      - name: "Test: Tests.avm (Elixir)"
        timeout-minutes: 10
        working-directory: build
        run: |
          ulimit -c unlimited
          if command -v elixirc >/dev/null 2>&1 && command -v elixir >/dev/null 2>&1
          then
            valgrind --error-exitcode=1 ./src/AtomVM ./tests/libs/exavmlib/Tests.avm
            ./src/AtomVM ./tests/libs/exavmlib/Tests.avm
          else
            echo "Elixir not installed, skipping Elixir tests"
          fi

      - name: "Install and smoke test"
        working-directory: build
        run: |
          ulimit -c unlimited
          sudo PATH=${PATH} make install
          atomvm examples/erlang/hello_world.avm
          atomvm -v
          atomvm -h

      - name: "Run coredumpctl info"
        if: ${{ failure() }}
        run: |
          # Wait until systemd-coredump finished
          while ps x | grep -cE 'systemd-[c]oredump'; do
              echo systemd-coredump is still running
              sleep 1
          done
          # info works on all versions of ubuntu
          coredumpctl info || true
          # The following only works on recent versions of ubuntu
          coredumpctl debug --debugger-arguments="-batch -ex 'info all-registers'" || true
          coredumpctl debug --debugger-arguments="-batch -ex 'info threads'" || true
          coredumpctl debug --debugger-arguments="-batch -ex 'thread apply all bt full'" || true
          coredumpctl debug --debugger-arguments='-batch -ex "display /10i $pc"' || true
          coredumpctl dump -o core.dump || true
          if [ -e core.dump ]; then
              mkdir core
              mv core.dump core/
              cp build/src/AtomVM core/
              cp build/tests/test-* core/
          fi

      - name: "Upload any dumped core"
        uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: core-${{ matrix.os }}-${{ matrix.cc }}-${{ matrix.otp }}-${{ github.run_id }}-${{ github.run_attempt }}
          path: |
            core/*
          retention-days: 5
