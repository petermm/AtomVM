#
#  Copyright 2022 Davide Bettio <davide@uninstall.it>
#
#  SPDX-License-Identifier: Apache-2.0 OR LGPL-2.1-or-later
#

name: ESP32 Builds

on:
  push:
    paths:
      - '.github/workflows/esp32-build.yaml'
      - 'CMakeLists.txt'
      - 'libs/**'
      - 'src/platforms/esp32/**'
      - 'src/platforms/esp32/**/**'
      - 'src/libAtomVM/**'
      - 'tools/packbeam/**'
  pull_request:
    paths:
      - '.github/workflows/esp32-build.yaml'
      - 'src/platforms/esp32/**'
      - 'src/platforms/esp32/**/**'
      - 'src/libAtomVM/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref != 'refs/heads/main' && github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  esp-idf:
    runs-on: ubuntu-24.04
    container: espressif/idf:${{ matrix.idf-version }}

    strategy:
      fail-fast: false

      matrix:
        esp-idf-target: ["esp32", "esp32c3"]
        idf-version:
         - 'v5.0.8'
         - 'v5.1.6'
         - 'v5.2.4'
         - 'v5.3.2'
         - 'v5.4'

        exclude:
        - esp-idf-target: "esp32c3"
          idf-version: 'v5.0.8'
        - esp-idf-target: "esp32c3"
          idf-version: 'v5.1.6'
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Build with idf.py
      shell: bash
      working-directory: ./src/platforms/esp32/
      run: |
        . $IDF_PATH/export.sh
        export IDF_TARGET=${{matrix.esp-idf-target}}
        idf.py set-target ${{matrix.esp-idf-target}}
        idf.py build
        idf.py size
    - name: Print component size info with idf.py
      shell: bash
      working-directory: ./src/platforms/esp32/
      run: |
        . $IDF_PATH/export.sh
        idf.py size-components

    - name: Install dependencies to build host AtomVM and run qemu
      run: |
        set -eu
        apt update
        DEBIAN_FRONTEND=noninteractive apt install -y -q \
            doxygen erlang-base erlang-dialyzer \
            libglib2.0-0 libpixman-1-0 \
            gcc g++ zlib1g-dev libsdl2-2.0-0 libslirp0 libmbedtls-dev

    - name: Install qemu binary from espressif/qemu esp32
      if: runner.arch != 'ARM64' && runner.os == 'Linux' && matrix.esp-idf-target == 'esp32'
      run: |
        set -eu
        QEMU_VER=esp-develop-9.2.2-20250228
        QEMU_XTENSA_DIST=qemu-xtensa-softmmu-esp_develop_9.2.2_20250228-x86_64-linux-gnu.tar.xz
        QEMU_XTENSA_SHA256=0ad2f51961ce8f0890c55474c70101201afc59c6464fe8502c39af523a641244
        wget --no-verbose https://github.com/espressif/qemu/releases/download/${QEMU_VER}/${QEMU_XTENSA_DIST}
        echo "${QEMU_XTENSA_SHA256} *${QEMU_XTENSA_DIST}" | sha256sum --check --strict -
        tar -xf ${QEMU_XTENSA_DIST} -C /opt && rm ${QEMU_XTENSA_DIST}

    - name: Install qemu binary from espressif/qemu esp32c3
      if: runner.arch != 'ARM64' && runner.os == 'Linux' && matrix.esp-idf-target == 'esp32c3'
      run: |
        set -eu
        QEMU_VER=esp-develop-9.2.2-20250228
        QEMU_RISCV32_DIST=qemu-riscv32-softmmu-esp_develop_9.2.2_20250228-x86_64-linux-gnu.tar.xz
        QEMU_RISCV32_SHA256=56269d57a4b8b5f7bd8a68f43e30f6302aab73e0d62a2895673ac1e0c4f2d040
        wget --no-verbose https://github.com/espressif/qemu/releases/download/${QEMU_VER}/${QEMU_RISCV32_DIST}
        echo "${QEMU_RISCV32_SHA256} *${QEMU_RISCV32_DIST}" | sha256sum --check --strict -
        tar -xf ${QEMU_RISCV32_DIST} -C /opt && rm ${QEMU_RISCV32_DIST}

    - name: Install qemu binary from espressif/qemu ARM64 esp32
      if: runner.arch == 'ARM64' && runner.os == 'Linux' && matrix.esp-idf-target == 'esp32'
      run: |
        set -eu
        QEMU_VER=esp-develop-9.2.2-20250228
        QEMU_XTENSA_DIST=qemu-xtensa-softmmu-esp_develop_9.2.2_20250228-aarch64-linux-gnu.tar.xz
        QEMU_XTENSA_SHA256=7f119e4bebbb3950cce5af996f7be949b4dd2695b6c65225149c8b057ebbfa37
        wget --no-verbose https://github.com/espressif/qemu/releases/download/${QEMU_VER}/${QEMU_XTENSA_DIST}
        echo "${QEMU_XTENSA_SHA256} *${QEMU_XTENSA_DIST}" | sha256sum --check --strict -
        tar -xf ${QEMU_XTENSA_DIST} -C /opt && rm ${QEMU_XTENSA_DIST}

    - name: Install qemu binary from espressif/qemu ARM64 esp32c3
      if: runner.arch == 'ARM64' && runner.os == 'Linux' && matrix.esp-idf-target == 'esp32c3'
      run: |
        set -eu
        QEMU_VER=esp-develop-9.2.2-20250228
        QEMU_RISCV32_DIST=qemu-riscv32-softmmu-esp_develop_9.2.2_20250228-aarch64-linux-gnu.tar.xz
        QEMU_RISCV32_SHA256=d017d515662d1c66eef6741cb0de62e83e5b2fb981ef3387f4afa5729903f4a7
        wget --no-verbose https://github.com/espressif/qemu/releases/download/${QEMU_VER}/${QEMU_RISCV32_DIST}
        echo "${QEMU_RISCV32_SHA256} *${QEMU_RISCV32_DIST}" | sha256sum --check --strict -
        tar -xf ${QEMU_RISCV32_DIST} -C /opt && rm ${QEMU_RISCV32_DIST}

    - name: Install pytest and pytest-embedded plugins
      run: |
        set -e
        . $IDF_PATH/export.sh
        pip install pytest==8.3.5 \
            pytest-embedded==1.15.0 \
            pytest-embedded-serial-esp==1.15.0 \
            pytest-embedded-idf==1.15.0 \
            pytest-embedded-qemu==1.15.0

    - name: Build ESP32 tests using idf.py with memory checks
      working-directory: ./src/platforms/esp32/test/
      run: |
        set -e
        export PATH=${PATH}:${HOME}/.cache/rebar3/bin
        cp sdkconfig.defaults sdkconfig.defaults.backup
        echo "CONFIG_COMPILER_STACK_CHECK_MODE_ALL=y" >> sdkconfig.defaults
        echo "CONFIG_COMPILER_STACK_CHECK=y" >> sdkconfig.defaults
        echo "CONFIG_FREERTOS_WATCHPOINT_END_OF_STACK=y" >> sdkconfig.defaults
        echo "CONFIG_HEAP_POISONING_COMPREHENSIVE=y" >> sdkconfig.defaults
        echo "CONFIG_ESP_WIFI_IRAM_OPT=n" >> sdkconfig.defaults
        echo "CONFIG_ESP_WIFI_RX_IRAM_OPT=n" >> sdkconfig.defaults
        . $IDF_PATH/export.sh
        export IDF_TARGET=${{matrix.esp-idf-target}}
        idf.py set-target ${{matrix.esp-idf-target}}
        idf.py build

    - name: Run ESP32 tests using qemu with memory checks build
      working-directory: ./src/platforms/esp32/test/
      timeout-minutes: 10
      run: |
        set -e
        . $IDF_PATH/export.sh
        export PATH=/opt/qemu/bin:${PATH}
        pytest --target=${{matrix.esp-idf-target}} --embedded-services=idf,qemu -s
        idf.py clean
        cp sdkconfig.defaults.backup sdkconfig.defaults

    - name: Build ESP32 tests using idf.py
      working-directory: ./src/platforms/esp32/test/
      run: |
        set -e
        . $IDF_PATH/export.sh
        export IDF_TARGET=${{matrix.esp-idf-target}}
        idf.py set-target ${{matrix.esp-idf-target}}
        idf.py build

    - name: Run ESP32 tests using qemu
      working-directory: ./src/platforms/esp32/test/
      timeout-minutes: 10
      run: |
        set -e
        . $IDF_PATH/export.sh
        export PATH=/opt/qemu/bin:${PATH}
        pytest --target=${{matrix.esp-idf-target}} --embedded-services=idf,qemu -s
